
###################################################################################################################
###################################################################################################################
###################################################################################################################
# tennis ball tracking
###################################################################################################################
###################################################################################################################
###################################################################################################################

df = df[['f', 'racket_side', 'swing']]

df['bRadiusAndCoords'] = df.apply(lambda x: getTennisBallRadiusAndCoordinates(x, tbBoxes), axis=1)

df[['bRadius', 'bx0', 'by0']] = pd.DataFrame(df['bRadiusAndCoords'].tolist(), index=df.index)

df['bx1'] = df['bx0'].shift(1)
df['by1'] = df['by0'].shift(1)
df['bx2'] = df['bx0'].shift(2)
df['by2'] = df['by0'].shift(2)
df['bx3'] = df['bx0'].shift(3)
df['by3'] = df['by0'].shift(3)
df['bx4'] = df['bx0'].shift(4)
df['by4'] = df['by0'].shift(4)


# VECTORS
# https://stackoverflow.com/questions/17332759/finding-vectors-with-2-points
# https://stackoverflow.com/a/18514434/8870055 dealing with points and vectors and functions

def unit_vector(vector):
    """ Returns the unit vector of the vector.  """
    return vector / np.linalg.norm(vector)


def angle_between(v1, v2):
    """ Returns the angle in radians between vectors 'v1' and 'v2'::
            # >>> angle_between((1, 0, 0), (0, 1, 0))
            # 1.5707963267948966
            # >>> angle_between((1, 0, 0), (1, 0, 0))
            # 0.0
            # >>> angle_between((1, 0, 0), (-1, 0, 0))
            3.141592653589793
    """
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))


def vec(x1, y1, x2, y2):
    if pd.isna(x1) or  pd.isna(y1) or  pd.isna(x2) or  pd.isna(y2):
        return np.array([x2 - x1, y2 - y1])
    return np.array([x2 - x1, y2 - y1]);


# THESE ARE NOT VECTORS!  THEYRE COORDINATES!!!

df['ba0'] = df.apply(lambda r: angle_between(vec(r.bx2, r.by2, r.bx1, r.by1), vec(r.bx1, r.by1, r.bx0, r.by0)), axis=1)

df['ba0'] = df.apply(lambda r: angle_between(np.array([r.bx1, r.by1]), np.array([r.bx0, r.by0])), axis=1)
df['ba1'] = df.apply(lambda r: angle_between(np.array([r.bx2, r.by2]), np.array([r.bx0, r.by0])), axis=1)
df['ba2'] = df.apply(lambda r: angle_between(np.array([r.bx3, r.by3]), np.array([r.bx0, r.by0])), axis=1)
df['ba3'] = df.apply(lambda r: angle_between(np.array([r.bx4, r.by4]), np.array([r.bx0, r.by0])), axis=1)

df['bd0'] = df.apply(lambda r: distLam(r.bx1, r.by1, r.bx0, r.by0), axis=1)
df['bd1'] = df.apply(lambda r: distLam(r.bx2, r.by2, r.bx0, r.by0), axis=1)
df['bd2'] = df.apply(lambda r: distLam(r.bx3, r.by3, r.bx0, r.by0), axis=1)
df['bd3'] = df.apply(lambda r: distLam(r.bx4, r.by4, r.bx0, r.by0), axis=1)

# now what


# i have all the data??????


# lets make everytyhig fresh